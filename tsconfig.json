{
  "include":[
    "src/",
    "types/"
  ],
  "compilerOptions": {

    "target": "es6",       /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    //目标最新版本的 ECMAScript

    "module": "ESNext",                                /* Specify what module code is generated. */
     //指定模块代码生成：“none”、“commonjs”、“amd”、“system”、“umd”、“es2015”或“ESNext”

     "lib":["DOM","ES2015"],

     "declaration": true,

     "declarationDir": "./dist",
     
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
    //通过为所有导入创建命名空间对象，启用 CommonJS 和 ES 模块之间的发射互操作性。 暗示 'allowSyntheticDefaultImports

    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */
    //禁止对同一文件的大小写不一致的引用

    "strict": true,                                      /* Enable all strict type-checking options. */
    //启用所有严格的类型检查选项

    "skipLibCheck": true,                                /* Skip type checking all .d.ts files. */
    //跳过类型检查所有 .d.ts 文件


    /* Projects */
    // "incremental": true,                              /* 启用增量编译 */
    // "composite": true,                                /* 启用允许 TypeScript 项目与项目引用一起使用的约束 */
    // "tsBuildInfoFile": "./",                          /* 指定 .tsbuildinfo 增量编译文件的文件夹. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 引用复合项目时禁用首选源文件而不是声明文件 */
    // "disableSolutionSearching": true,                 /* 编辑时选择项目退出多项目参考检查. */
    // "disableReferencedProjectLoad": true,             /* 减少 TypeScript 自动加载的项目数量. */

    /* Language and Environment */
    // "lib": [],                                        /* 指定一组描述目标运行时环境的捆绑库声明文件. */
    // "jsx": "preserve",                                /* 指定生成的 JSX 代码。 */
    // "experimentalDecorators": true,                   /* 启用对 TC39 第 2 阶段草稿装饰器的实验性支持. */
    // "emitDecoratorMetadata": true,                    /* 为源文件中的修饰声明发出设计类型元数据。 */
    // "jsxFactory": "",                                 /* 指定针对 React JSX 发射时使用的 JSX 工厂函数，例如 'React.createElement' 或 'h' */
    // "jsxFragmentFactory": "",                         /* 指定针对 React JSX 发射时用于片段的 JSX 片段引用，例如 “React.Fragment”或“Fragment”。 */
    // "jsxImportSource": "",                            /* 指定使用 `jsx: react-jsx*` 时用于导入 JSX 工厂函数的模块说明符 */
    // "reactNamespace": "",                             /* 指定为“createElement”调用的对象。 这仅适用于以 `react` JSX 发射为目标的情况。 */
    // "noLib": true,                                    /*禁用包含任何库文件，包括默认的 lib.d.ts。 */
    // "useDefineForClassFields": true,                  /* 发出符合 ECMAScript 标准的类字段 */

    /* Modules */
    // "rootDir": "./",                                  /* 在源文件中指定根文件夹 */
    // "moduleResolution": "node",                       /* 指定 TypeScript 如何从给定的模块说明符中查找文件。 */
    // "baseUrl": "./",                                  /* 指定基目录以解析非相对模块名称。*/
    // "paths": {},                                      /* 指定一组将导入重新映射到其他查找位置的条目 */
    // "rootDirs": [],                                   /*解析模块时允许将多个文件夹视为一个。 */
    // "typeRoots": [],                                  /* 指定多个类似 `./node_modules/@types` 的文件夹. */
    // "types": [],                                      /* 指定要包含的类型包名称，而不在源文件中引用。 */
    // "allowUmdGlobalAccess": true,                     /* 允许从模块访问 UMD 全局变量。 */
    // "resolveJsonModule": true,                        /* 启用导入 .json 文件 */
    // "noResolve": true,                                /* 禁止 `import`s、`require`s 或 `<reference>`s 扩展 TypeScript 应添加到项目中的文件数量 */

    /* JavaScript Support */
    // "allowJs": true,                                  /* 允许 JavaScript 文件成为程序的一部分。 使用 `checkJS` 选项从这些文件中获取错误。 */
    // "checkJs": true,                                  /* 在类型检查的 JavaScript 文件中启用错误报告。 */
    // "maxNodeModuleJsDepth": 1,                        /* 指定用于从 `node_modules` 检查 JavaScript 文件的最大文件夹深度。 仅适用于 `allowJs`。. */

    /* Emit */
    // "declaration": true,                              /* 从项目中的 TypeScript 和 JavaScript 文件生成 .d.ts 文件。 */
    // "declarationMap": true,                           /* 为 d.ts 文件创建源映射。 */
    // "emitDeclarationOnly": true,                      /* 只输出 d.ts 文件，不输出 JavaScript 文件。 */
    // "sourceMap": true,                                /*为发出的 JavaScript 文件创建源映射文件 */
    // "outFile": "./",                                  /* 指定将所有输出捆绑到一个 JavaScript 文件中的文件。 如果 `declaration` 为真，还指定一个捆绑所有 .d.ts 输出的文件 */
    // "outDir": "./",                                   /* 为所有发出的文件指定一个输出文件夹。. */
    // "removeComments": true,                           /* 禁用发出评论。. */
    // "noEmit": true,                                   /*禁用从编译中发出文件。 */
    // "importHelpers": true,                            /* 允许每个项目从 tslib 导入帮助函数一次，而不是在每个文件中包含它们。 */
    // "importsNotUsedAsValues": "remove",               /* 为仅用于类型的导入指定发出/检查行为*/
    // "downlevelIteration": true,                       /* 为迭代发出更合规但冗长且性能更低的 JavaScript */
    // "sourceRoot": "",                                 /* 指定调试器查找参考源代码的根路径。 */
    // "mapRoot": "",                                    /*指定调试器应该定位映射文件而不是生成的位置的位置。 */
    // "inlineSourceMap": true,                          /* 在发出的 JavaScript 中包含 sourcemap 文件。 */
    // "inlineSources": true,                            /* 在发出的 JavaScript 内的源映射中包含源代码 */
    // "emitBOM": true,                                  /* 在输出文件的开头发出 UTF-8 字节顺序标记 (BOM) */
    // "newLine": "crlf",                                /* 设置发送文件的换行符 */
    // "stripInternal": true,                            /* 禁止发出在其 JSDoc 注释中包含 `@internal` 的声明。 */
    // "noEmitHelpers": true,                            /*禁用在编译输出中生成自定义帮助函数，如 `__extends`。 */
    // "noEmitOnError": true,                            /* 如果报告任何类型检查错误，则禁用发出文件. */
    // "preserveConstEnums": true,                       /*禁用擦除生成代码中的“const enum”声明 */
    // "declarationDir": "./",                           /*指定生成的声明文件的输出目录。 */
    // "preserveValueImports": true,                     /* 在 JavaScript 输出中保留未使用的导入值，否则这些值将被删除。 */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* 确保每个文件都可以安全地转译，而无需依赖其他导入。. */
    // "allowSyntheticDefaultImports": true,             /*当模块没有默认导出时，允许“从 y 导入 x”。 */
    
    // "preserveSymlinks": true,                         /* 禁用解析符号链接到他们的真实路径。 这与节点中的相同标志相关。 */

    /* Type Checking */

    // "noImplicitAny": true,                            /* 为具有隐含“any”类型的表达式和声明启用错误报告。 */
    // "strictNullChecks": true,                         /* 类型检查时，考虑 `null` 和 `undefined` */
    // "strictFunctionTypes": true,                      /* 分配函数时，检查以确保参数和返回值是子类型兼容的 */
    // "strictBindCallApply": true,                      /* 检查 `bind`、`call` 和 `apply` 方法的参数是否与原始函数匹配 */
    // "strictPropertyInitialization": true,             /* 检查已声明但未在构造函数中设置的类属性 */
     "noImplicitThis": false,                           /* 当 `this` 的类型为 `any` 时启用错误报告 */
    // "useUnknownInCatchVariables": true,               /* 将 catch 子句变量键入为“未知”而不是“任何”。 */
    // "alwaysStrict": true,                             /*确保始终发出“使用严格”。 */
    // "noUnusedLocals": true,                           /* 未读取局部变量时启用错误报告。 */
    // "noUnusedParameters": true,                       /* 未读取函数参数时引发错误 */
    // "exactOptionalPropertyTypes": true,               /* 将可选属性类型解释为书面形式，而不是添加“未定义”。 */
    // "noImplicitReturns": true,                        /* 为未在函数中显式返回的代码路径启用错误报告. */
    // "noFallthroughCasesInSwitch": true,               /* 在 switch 语句中启用失败案例的错误报告。. */
    // "noUncheckedIndexedAccess": true,                 /* 在索引签名结果中包含“未定义” */
    // "noImplicitOverride": true,                       /* 确保派生类中的覆盖成员使用覆盖修饰符进行标记。 */
    // "noPropertyAccessFromIndexSignature": true,       /* 对使用索引类型声明的键强制使用索引访问器 */
    // "allowUnusedLabels": true,                        /* 禁用未使用标签的错误报告。 */
    // "allowUnreachableCode": true,                     /* 禁用无法访问代码的错误报告 */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */

  }
}
